import{_ as i,c as t,o as a,ae as s}from"./chunks/framework.CqV5Rifv.js";const m=JSON.parse('{"title":"The Init System","description":"","frontmatter":{},"headers":[],"relativePath":"dev/getting-started/init-system.md","filePath":"dev/getting-started/init-system.md"}'),n={name:"dev/getting-started/init-system.md"};function o(l,e,r,h,d,c){return a(),t("div",null,e[0]||(e[0]=[s(`<h1 id="the-init-system" tabindex="-1">The Init System <a class="header-anchor" href="#the-init-system" aria-label="Permalink to &quot;The Init System&quot;">​</a></h1><h2 id="what-are-init-scripts" tabindex="-1">What are Init Scripts? <a class="header-anchor" href="#what-are-init-scripts" aria-label="Permalink to &quot;What are Init Scripts?&quot;">​</a></h2><p><em>Init scripts</em> are programmable config files, where the desired behaviour can be described in terms of code. They allow existing features to be customised, new logic to be added, while being trivially simple to extend.</p><p>An <em>init script</em> is invoked when the game starts, which may in turn run code from other files. Event listeners can be registered and threads can be spawned so the init script continues to run after the game has completed loading.</p><h2 id="hello-jscore" tabindex="-1">Hello JSCore! <a class="header-anchor" href="#hello-jscore" aria-label="Permalink to &quot;Hello JSCore!&quot;">​</a></h2><p>In this section we will be writing an <em>init script</em> printing &quot;Hello JSCore!&quot; on game launch.</p><ol><li>Create a file at <code>.minecraft/config/jscore/sys/init.js</code>, and open it in a text editor.</li><li>Paste the following code in the file.</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Core </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Packages.ws.siri.jscore.Core;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello JSCore!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ol start="3"><li>Launch the game - you should see the line &quot;Hello JSCore!&quot; in logs.</li></ol><h3 id="explanation" tabindex="-1">Explanation <a class="header-anchor" href="#explanation" aria-label="Permalink to &quot;Explanation&quot;">​</a></h3><p>The first line is similar to an import statement in Java, defining <code>Core</code> to be an alias where <code>ws.siri.jscore.Core</code> is the full qualified name of the Java class. <code>Core</code> includes the function <code>Core.log</code> that writes string content to log.</p><blockquote><p><code>Packages</code> is an entry point to importing Java classes.</p></blockquote><p>The second line calls method <code>Core.log</code> defined in line 1, simple as that.</p>`,13)]))}const g=i(n,[["render",o]]);export{m as __pageData,g as default};
