import{_ as a,c as o,o as t,ae as s}from"./chunks/framework.CqV5Rifv.js";const u=JSON.parse('{"title":"The JSCore Bootstrap","description":"","frontmatter":{},"headers":[],"relativePath":"dev/getting-started/jscore-bootstrap.md","filePath":"dev/getting-started/jscore-bootstrap.md"}'),i={name:"dev/getting-started/jscore-bootstrap.md"};function n(l,e,r,d,p,c){return t(),o("div",null,e[0]||(e[0]=[s(`<h1 id="the-jscore-bootstrap" tabindex="-1">The JSCore Bootstrap <a class="header-anchor" href="#the-jscore-bootstrap" aria-label="Permalink to &quot;The JSCore Bootstrap&quot;">​</a></h1><h2 id="what-is-the-bootstrap" tabindex="-1">What is the Bootstrap? <a class="header-anchor" href="#what-is-the-bootstrap" aria-label="Permalink to &quot;What is the Bootstrap?&quot;">​</a></h2><p>The JSCore Bootstrap is a collection of useful methods bringing in familiar features from Node.JS, as well as providing boilerplate for Java/JavaScript workarounds.</p><p>Provided boilerplate includes:</p><ul><li>Basic IO: <code>console.log/error</code></li><li>Import system: <code>require(&quot;path/to/file&quot;)</code></li><li>Declaration of Java functional interface.</li></ul><p>The Bootstrap also include the <em>Core module</em>, providing in-game access of JSCore features.</p><h2 id="using-the-bootstrap" tabindex="-1">Using the Bootstrap <a class="header-anchor" href="#using-the-bootstrap" aria-label="Permalink to &quot;Using the Bootstrap&quot;">​</a></h2><ol><li>Download <a href="https://github.com/FabricCore/bootstrap.js" target="_blank" rel="noreferrer">bootstrap.zip</a>.</li><li>Unzip the bootstrap so your folder structure looks as below.</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.minecraft/config/jscore/</span></span>
<span class="line"><span>├── init.js</span></span>
<span class="line"><span>├── modules/</span></span>
<span class="line"><span>│   └── core/</span></span>
<span class="line"><span>│       └── entry.js</span></span>
<span class="line"><span>└── sys/</span></span>
<span class="line"><span>    ├── init.js</span></span>
<span class="line"><span>    └── mod.js</span></span></code></pre></div><ol start="3"><li>Launch Minecraft.</li></ol><h3 id="loading-files" tabindex="-1">Loading Files <a class="header-anchor" href="#loading-files" aria-label="Permalink to &quot;Loading Files&quot;">​</a></h3><p>The function <code>require(&quot;path/to/file&quot;)</code> loads in other script files. It behaves differently from the &quot;require&quot; from Node.JS.</p><ul><li>Relative paths are not allowed, it must be the full path starting from <code>config/jscore</code>.</li><li><code>require</code> is essentially a macro that expands into the content of the file specified - the loaded file can see all variables defined in the loader file.</li></ul><h3 id="load-order" tabindex="-1">Load Order <a class="header-anchor" href="#load-order" aria-label="Permalink to &quot;Load Order&quot;">​</a></h3><p>The entry point of the init script is <code>sys/init.js</code>, following the code it pulls in <code>sys/mod.js</code>, which loads in other sys files.</p><p>Finally the top level <code>init.js</code> is loaded, anything loaded including and after this file is considered non-critical, such as user defined modules. Any code you write should be loaded from <code>init.js</code>, such as user-defined modules.</p><h2 id="core-commands" tabindex="-1">Core Commands <a class="header-anchor" href="#core-commands" aria-label="Permalink to &quot;Core Commands&quot;">​</a></h2><p>The <em>Core module</em> provides two notable commands - <code>/jseval</code> and <code>/jsload</code>.</p><h3 id="js-lt-code-gt" tabindex="-1">/js &lt;code&gt; <a class="header-anchor" href="#js-lt-code-gt" aria-label="Permalink to &quot;/js &amp;lt;code&amp;gt;&quot;">​</a></h3><p>A JavaScript REPL.</p><p>Any expression entered will be evaluated and resulting value printed on screen. This is useful for debugging stubborn code that refuse to run.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/js 1 + 1</span></span>
<span class="line"><span>2</span></span></code></pre></div><h3 id="js-load-lt-path-gt" tabindex="-1">/js load &lt;path&gt; <a class="header-anchor" href="#js-load-lt-path-gt" aria-label="Permalink to &quot;/js load &amp;lt;path&amp;gt;&quot;">​</a></h3><p>Load a script.</p><p>The script at the specified path will be ran. This is hot reload command where updated scripts can be loaded, and new commands to be registered without restarting the game.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/js load init.js</span></span>
<span class="line"><span>Script loaded</span></span></code></pre></div><p>To allow hot reloads, <code>let</code> should be used in place of <code>const</code>. As <code>let</code> values can be overwritten but multiple definitions of <code>const</code> is not allowed.</p>`,27)]))}const m=a(i,[["render",n]]);export{u as __pageData,m as default};
